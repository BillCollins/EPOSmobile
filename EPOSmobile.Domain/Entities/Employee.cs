//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace EPOSmobile.Domain.Entities
{
    public partial class Employee
    {
        #region Primitive Properties
    
        public virtual int EmployeeID
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual string TelephoneNumber
        {
            get;
            set;
        }
    
        public virtual string EmailAddress
        {
            get { return _emailAddress; }
            set { _emailAddress = value; }
        }
        private string _emailAddress = "";
    
        public virtual string EmployeeNumber
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Address> Addresses
        {
            get
            {
                if (_addresses == null)
                {
                    var newCollection = new FixupCollection<Address>();
                    newCollection.CollectionChanged += FixupAddresses;
                    _addresses = newCollection;
                }
                return _addresses;
            }
            set
            {
                if (!ReferenceEquals(_addresses, value))
                {
                    var previousValue = _addresses as FixupCollection<Address>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAddresses;
                    }
                    _addresses = value;
                    var newValue = value as FixupCollection<Address>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAddresses;
                    }
                }
            }
        }
        private ICollection<Address> _addresses;
    
        public virtual ICollection<Sales> Sales
        {
            get
            {
                if (_sales == null)
                {
                    var newCollection = new FixupCollection<Sales>();
                    newCollection.CollectionChanged += FixupSales;
                    _sales = newCollection;
                }
                return _sales;
            }
            set
            {
                if (!ReferenceEquals(_sales, value))
                {
                    var previousValue = _sales as FixupCollection<Sales>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSales;
                    }
                    _sales = value;
                    var newValue = value as FixupCollection<Sales>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSales;
                    }
                }
            }
        }
        private ICollection<Sales> _sales;
    
        public virtual Shift Shift
        {
            get { return _shift; }
            set
            {
                if (!ReferenceEquals(_shift, value))
                {
                    var previousValue = _shift;
                    _shift = value;
                    FixupShift(previousValue);
                }
            }
        }
        private Shift _shift;

        #endregion
        #region Association Fixup
    
        private void FixupShift(Shift previousValue)
        {
            if (previousValue != null && previousValue.Employees.Contains(this))
            {
                previousValue.Employees.Remove(this);
            }
    
            if (Shift != null)
            {
                if (!Shift.Employees.Contains(this))
                {
                    Shift.Employees.Add(this);
                }
            }
        }
    
        private void FixupAddresses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Address item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Address item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }
    
        private void FixupSales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Sales item in e.NewItems)
                {
                    item.Employee = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sales item in e.OldItems)
                {
                    if (ReferenceEquals(item.Employee, this))
                    {
                        item.Employee = null;
                    }
                }
            }
        }

        #endregion
    }
}
