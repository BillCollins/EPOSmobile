//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace EPOSmobile.Domain.Entities
{
    public partial class Order
    {
        #region Primitive Properties
    
        public virtual int OrderID
        {
            get;
            set;
        }
    
        public virtual bool IsOpen
        {
            get { return _isOpen; }
            set { _isOpen = value; }
        }
        private bool _isOpen = true;
    
        public virtual bool IsCleared
        {
            get { return _isCleared; }
            set { _isCleared = value; }
        }
        private bool _isCleared = false;

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<OrderItem> OrderItems
        {
            get
            {
                if (_orderItems == null)
                {
                    var newCollection = new FixupCollection<OrderItem>();
                    newCollection.CollectionChanged += FixupOrderItems;
                    _orderItems = newCollection;
                }
                return _orderItems;
            }
            set
            {
                if (!ReferenceEquals(_orderItems, value))
                {
                    var previousValue = _orderItems as FixupCollection<OrderItem>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOrderItems;
                    }
                    _orderItems = value;
                    var newValue = value as FixupCollection<OrderItem>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOrderItems;
                    }
                }
            }
        }
        private ICollection<OrderItem> _orderItems;
    
        public virtual Sales Sale
        {
            get { return _sale; }
            set
            {
                if (!ReferenceEquals(_sale, value))
                {
                    var previousValue = _sale;
                    _sale = value;
                    FixupSale(previousValue);
                }
            }
        }
        private Sales _sale;
    
        public virtual Table Table
        {
            get { return _table; }
            set
            {
                if (!ReferenceEquals(_table, value))
                {
                    var previousValue = _table;
                    _table = value;
                    FixupTable(previousValue);
                }
            }
        }
        private Table _table;

        #endregion
        #region Association Fixup
    
        private void FixupSale(Sales previousValue)
        {
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Sale != null)
            {
                if (!Sale.Orders.Contains(this))
                {
                    Sale.Orders.Add(this);
                }
            }
        }
    
        private void FixupTable(Table previousValue)
        {
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Table != null)
            {
                if (!Table.Orders.Contains(this))
                {
                    Table.Orders.Add(this);
                }
            }
        }
    
        private void FixupOrderItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (OrderItem item in e.NewItems)
                {
                    item.Order = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (OrderItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.Order, this))
                    {
                        item.Order = null;
                    }
                }
            }
        }

        #endregion
    }
}
