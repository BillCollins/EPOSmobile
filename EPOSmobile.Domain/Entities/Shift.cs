//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace EPOSmobile.Domain.Entities
{
    public partial class Shift
    {
        #region Primitive Properties
    
        public virtual int ShiftID
        {
            get;
            set;
        }
    
        public virtual System.DateTime StartTime
        {
            get;
            set;
        }
    
        public virtual System.DateTime EndTime
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Sales> Sales
        {
            get
            {
                if (_sales == null)
                {
                    var newCollection = new FixupCollection<Sales>();
                    newCollection.CollectionChanged += FixupSales;
                    _sales = newCollection;
                }
                return _sales;
            }
            set
            {
                if (!ReferenceEquals(_sales, value))
                {
                    var previousValue = _sales as FixupCollection<Sales>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSales;
                    }
                    _sales = value;
                    var newValue = value as FixupCollection<Sales>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSales;
                    }
                }
            }
        }
        private ICollection<Sales> _sales;
    
        public virtual ShiftSchedule ShiftSchedule
        {
            get { return _shiftSchedule; }
            set
            {
                if (!ReferenceEquals(_shiftSchedule, value))
                {
                    var previousValue = _shiftSchedule;
                    _shiftSchedule = value;
                    FixupShiftSchedule(previousValue);
                }
            }
        }
        private ShiftSchedule _shiftSchedule;
    
        public virtual ICollection<Employee> Employees
        {
            get
            {
                if (_employees == null)
                {
                    var newCollection = new FixupCollection<Employee>();
                    newCollection.CollectionChanged += FixupEmployees;
                    _employees = newCollection;
                }
                return _employees;
            }
            set
            {
                if (!ReferenceEquals(_employees, value))
                {
                    var previousValue = _employees as FixupCollection<Employee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEmployees;
                    }
                    _employees = value;
                    var newValue = value as FixupCollection<Employee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEmployees;
                    }
                }
            }
        }
        private ICollection<Employee> _employees;

        #endregion
        #region Association Fixup
    
        private void FixupShiftSchedule(ShiftSchedule previousValue)
        {
            if (previousValue != null && previousValue.Shifts.Contains(this))
            {
                previousValue.Shifts.Remove(this);
            }
    
            if (ShiftSchedule != null)
            {
                if (!ShiftSchedule.Shifts.Contains(this))
                {
                    ShiftSchedule.Shifts.Add(this);
                }
            }
        }
    
        private void FixupSales(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Sales item in e.NewItems)
                {
                    item.Shift = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sales item in e.OldItems)
                {
                    if (ReferenceEquals(item.Shift, this))
                    {
                        item.Shift = null;
                    }
                }
            }
        }
    
        private void FixupEmployees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Employee item in e.NewItems)
                {
                    item.Shift = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Employee item in e.OldItems)
                {
                    if (ReferenceEquals(item.Shift, this))
                    {
                        item.Shift = null;
                    }
                }
            }
        }

        #endregion
    }
}
